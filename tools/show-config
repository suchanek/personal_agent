#!/usr/bin/env python3
"""
Personal Agent Configuration Display Tool

This script provides a pretty-printed view of the personal agent's configuration
including environment variables, server settings, feature flags, and directory paths.

Usage:
    ./tools/show-config [options]

Options:
    -h, --help     Show this help message
    -v, --version  Show version information
    --no-color     Disable colored output
    --json         Output configuration as JSON
"""

import sys
import json
import argparse
from pathlib import Path
import yaml

# Add the src directory to Python path so we can import our modules
script_dir = Path(__file__).resolve().parent
project_root = script_dir.parent
src_dir = project_root / "src"
sys.path.insert(0, str(src_dir))

try:
    from personal_agent.config import settings
except ImportError as e:
    print(f"Error: Could not import settings module: {e}")
    print("Make sure you're running this script from the project root directory.")
    sys.exit(1)


def output_json():
    """Output configuration as JSON."""
    config_data = {
        "version": settings.get_package_version(),
        "environment_file": {
            "loaded": settings.dotenv_loaded,
            "path": str(settings.dotenv_path)
        },
        "environment_variables": dict(settings._env_vars) if settings._env_vars else {},
        "docker_environment_variables": get_docker_env_variables(),
        "docker_environment_variables_by_server": get_docker_env_variables_by_server(),
        "server_configuration": {
            "lightrag_url": settings.LIGHTRAG_URL,
            "lightrag_memory_url": settings.LIGHTRAG_MEMORY_URL,
            "weaviate_url": settings.WEAVIATE_URL,
            "ollama_url": settings.OLLAMA_URL,
            "remote_ollama_url": settings.REMOTE_OLLAMA_URL,
        },
        "feature_flags": {
            "use_weaviate": settings.USE_WEAVIATE,
            "use_mcp": settings.USE_MCP,
            "show_splash_screen": settings.SHOW_SPLASH_SCREEN,
        },
        "directories": {
            "root_dir": settings.ROOT_DIR,
            "home_dir": settings.HOME_DIR,
            "data_dir": settings.DATA_DIR,
            "repo_dir": settings.REPO_DIR,
            "agno_storage_dir": settings.AGNO_STORAGE_DIR,
            "agno_knowledge_dir": settings.AGNO_KNOWLEDGE_DIR,
        },
        "ai_storage": {
            "storage_backend": settings.STORAGE_BACKEND,
            "llm_model": settings.LLM_MODEL,
            "user_id": settings.USER_ID,
            "log_level": settings.LOG_LEVEL_STR,
        },
        "docker_compose_summary": get_docker_compose_summary()
    }
    
    print(json.dumps(config_data, indent=2))


def load_env_file(env_path):
    """Load environment variables from a .env file."""
    env_vars = {}
    if env_path.exists():
        try:
            with open(env_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        # Remove quotes if present
                        value = value.strip('"\'')
                        env_vars[key] = value
        except Exception as e:
            print(f"Error reading {env_path}: {e}")
    return env_vars


def get_docker_env_variables_by_server():
    """Get environment variables from Docker env files organized by server."""
    servers = {
        "lightrag_server": {
            "env_file": project_root / "lightrag_server" / "env.server",
            "mounted_env": project_root / "lightrag_server" / ".env"
        },
        "lightrag_memory_server": {
            "env_file": project_root / ".env",  # memory server uses main .env as env_file
            "mounted_env": project_root / "lightrag_memory_server" / "env.memory_server"
        }
    }
    
    docker_vars_by_server = {}
    for server_name, files in servers.items():
        docker_vars_by_server[server_name] = {}
        
        # Load env_file variables
        if files["env_file"].exists():
            env_vars = load_env_file(files["env_file"])
            docker_vars_by_server[server_name]["env_file"] = {
                "path": str(files["env_file"]),
                "variables": env_vars
            }
        
        # Load mounted .env variables
        if files["mounted_env"].exists():
            env_vars = load_env_file(files["mounted_env"])
            docker_vars_by_server[server_name]["mounted_env"] = {
                "path": str(files["mounted_env"]),
                "variables": env_vars
            }
    
    return docker_vars_by_server


def get_docker_env_variables():
    """Get environment variables from Docker env files (flat structure for JSON)."""
    servers_data = get_docker_env_variables_by_server()
    all_docker_vars = {}
    
    for server_name, server_data in servers_data.items():
        for env_type, env_info in server_data.items():
            for key, value in env_info["variables"].items():
                prefixed_key = f"{server_name.upper()}_{env_type.upper()}_{key}"
                all_docker_vars[prefixed_key] = value
    
    return all_docker_vars


def get_docker_compose_summary():
    """Get a summary of the docker-compose configurations."""
    docker_compose_files = {
        "lightrag_server": project_root / "lightrag_server" / "docker-compose.yml",
        "lightrag_memory_server": project_root / "lightrag_memory_server" / "docker-compose.yml",
    }
    
    summary = {}
    for name, path in docker_compose_files.items():
        if path.exists():
            with open(path, 'r') as f:
                try:
                    data = yaml.safe_load(f)
                    service_config = next(iter(data.get('services', {}).values()), {})
                    summary[name] = {
                        "image": service_config.get('image'),
                        "ports": service_config.get('ports'),
                        "volumes": service_config.get('volumes'),
                        "environment": service_config.get('environment'),
                    }
                except yaml.YAMLError as e:
                    summary[name] = {"error": f"Error parsing YAML: {e}"}
        else:
            summary[name] = {"error": "File not found"}
            
    return summary


def print_config_colored():
    """Print configuration with ANSI colors (fancy output)."""
    # ANSI color codes
    RESET = '\033[0m'
    BOLD = '\033[1m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    MAGENTA = '\033[95m'
    
    version = settings.get_package_version()
    print(f"{CYAN}{BOLD}{'=' * 60}{RESET}")
    print(f"{CYAN}{BOLD}  Personal Agent Configuration Status{RESET}")
    print(f"{CYAN}{BOLD}  Version: {YELLOW}{version}{RESET}")
    print(f"{CYAN}{BOLD}{'=' * 60}{RESET}")
    
    # Environment file status
    print(f"\n{BLUE}{BOLD}üìÅ Environment File Status:{RESET}")
    if settings.dotenv_loaded:
        print(f"  {GREEN}‚úì{RESET} Successfully loaded .env from: {CYAN}{settings.dotenv_path}{RESET}")
    else:
        print(f"  {RED}‚úó{RESET} Failed to load .env file")
    
    # Environment variables section
    if settings._env_vars:
        print(f"\n{BLUE}{BOLD}üîß Main Environment Variables (.env):{RESET}")
        print(f"  {BOLD}Variable{' '*20}Value{RESET}")
        for key, value in sorted(settings._env_vars.items()):
            # Mask sensitive values
            display_value = value
            if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):
                display_value = f"{RED}{'*' * len(value) if value else ''}{RESET}"
            else:
                display_value = f"{GREEN}{value}{RESET}"
            print(f"  {YELLOW}{key:<28}{RESET} {display_value}")
    
    # Docker environment variables section organized by server
    docker_servers = get_docker_env_variables_by_server()
    if docker_servers:
        print(f"\n{BLUE}{BOLD}üê≥ Docker Environment Variables by Server:{RESET}")
        for server_name, server_data in docker_servers.items():
            print(f"\n  {MAGENTA}{BOLD}üì¶ {server_name.replace('_', ' ').title()}:{RESET}")
            
            for env_type, env_info in server_data.items():
                env_type_display = "Environment File" if env_type == "env_file" else "Mounted Environment"
                print(f"    {CYAN}{env_type_display}{RESET} ({YELLOW}{env_info['path']}{RESET}):")
                
                if env_info['variables']:
                    for key, value in sorted(env_info['variables'].items()):
                        # Mask sensitive values
                        display_value = value
                        if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):
                            display_value = f"{RED}{'*' * len(value) if value else ''}{RESET}"
                        else:
                            display_value = f"{GREEN}{value}{RESET}"
                        print(f"      {YELLOW}{key:<26}{RESET} {display_value}")
                else:
                    print(f"      {RED}(No variables found){RESET}")
    
    # Configuration sections
    sections = [
        {
            'title': f'{BLUE}{BOLD}üåê Server Configuration{RESET}',
            'items': [
                ('LightRAG URL', settings.LIGHTRAG_URL),
                ('LightRAG Memory URL', settings.LIGHTRAG_MEMORY_URL),
                ('Weaviate URL', settings.WEAVIATE_URL),
                ('Ollama URL', settings.OLLAMA_URL),
                ('Remote Ollama URL', settings.REMOTE_OLLAMA_URL),
            ]
        },
        {
            'title': f'{BLUE}{BOLD}‚öôÔ∏è  Feature Flags{RESET}',
            'items': [
                ('Use Weaviate', f"{GREEN}‚úì{RESET}" if settings.USE_WEAVIATE else f"{RED}‚úó{RESET}"),
                ('Use MCP', f"{GREEN}‚úì{RESET}" if settings.USE_MCP else f"{RED}‚úó{RESET}"),
                ('Show Splash Screen', f"{GREEN}‚úì{RESET}" if settings.SHOW_SPLASH_SCREEN else f"{RED}‚úó{RESET}"),
            ]
        },
        {
            'title': f'{BLUE}{BOLD}üìÇ Directory Configuration{RESET}',
            'items': [
                ('Root Directory', settings.ROOT_DIR),
                ('Home Directory', settings.HOME_DIR),
                ('Data Directory', settings.DATA_DIR),
                ('Repository Directory', settings.REPO_DIR),
                ('Agno Storage Directory', settings.AGNO_STORAGE_DIR),
                ('Agno Knowledge Directory', settings.AGNO_KNOWLEDGE_DIR),
            ]
        },
        {
            'title': f'{BLUE}{BOLD}ü§ñ AI & Storage Configuration{RESET}',
            'items': [
                ('Storage Backend', settings.STORAGE_BACKEND),
                ('LLM Model', settings.LLM_MODEL),
                ('User ID', settings.USER_ID),
                ('Log Level', settings.LOG_LEVEL_STR),
            ]
        }
    ]
    
    for section in sections:
        print(f"\n{section['title']}:")
        print(f"  {BOLD}Setting{' '*22}Value{RESET}")
        for name, value in section['items']:
            # Color the values based on type for better readability
            if isinstance(value, bool):
                colored_value = f"{GREEN}{value}{RESET}" if value else f"{RED}{value}{RESET}"
            elif value and ('http://' in str(value) or 'https://' in str(value)):
                colored_value = f"{CYAN}{value}{RESET}"
            elif value and str(value).startswith('/'):
                colored_value = f"{YELLOW}{value}{RESET}"
            else:
                colored_value = f"{GREEN}{value}{RESET}" if value else f"{RED}None{RESET}"
            print(f"  {MAGENTA}{name:<30}{RESET} {colored_value}")

    # Docker Compose Summary
    docker_summary = get_docker_compose_summary()
    print(f"\n{CYAN}{BOLD}{'=' * 60}{RESET}")
    print(f"{CYAN}{BOLD}  Docker Compose Summary{RESET}")
    print(f"{CYAN}{BOLD}{'=' * 60}{RESET}")
    for name, config in docker_summary.items():
        print(f"\n{MAGENTA}{BOLD}üê≥ {name}:{RESET}")
        if "error" in config:
            print(f"  {RED}Error: {config['error']}{RESET}")
            continue
        
        if config.get('image'):
            print(f"  {BLUE}Image:{RESET} {GREEN}{config['image']}{RESET}")
        if config.get('ports'):
            print(f"  {BLUE}Ports:{RESET} {YELLOW}{', '.join(config['ports'])}{RESET}")
        if config.get('volumes'):
            print(f"  {BLUE}Volumes:{RESET}")
            for v in config['volumes']:
                print(f"    {CYAN}- {v}{RESET}")
        if config.get('environment'):
            print(f"  {BLUE}Environment:{RESET}")
            for e in config['environment']:
                print(f"    {CYAN}- {e}{RESET}")

    # Footer
    print(f"\n{CYAN}{BOLD}{'=' * 60}{RESET}")
    print(f"{GREEN}{BOLD}Configuration loaded successfully!{RESET}")
    print(f"{CYAN}{BOLD}{'=' * 60}{RESET}")


def print_config_no_color():
    """Print configuration without ANSI colors."""
    version = settings.get_package_version()
    print("=" * 60)
    print("  Personal Agent Configuration Status")
    print(f"  Version: {version}")
    print("=" * 60)
    
    # Environment file status
    print("\nüìÅ Environment File Status:")
    if settings.dotenv_loaded:
        print(f"  ‚úì Successfully loaded .env from: {settings.dotenv_path}")
    else:
        print("  ‚úó Failed to load .env file")
    
    # Environment variables section
    if settings._env_vars:
        print("\nüîß Main Environment Variables (.env):")
        print(f"  Variable{' '*20}Value")
        for key, value in sorted(settings._env_vars.items()):
            # Mask sensitive values
            display_value = value
            if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):
                display_value = '*' * len(value) if value else ''
            print(f"  {key:<28} {display_value}")
    
    # Docker environment variables section organized by server
    docker_servers = get_docker_env_variables_by_server()
    if docker_servers:
        print("\nüê≥ Docker Environment Variables by Server:")
        for server_name, server_data in docker_servers.items():
            print(f"\n  üì¶ {server_name.replace('_', ' ').title()}:")
            
            for env_type, env_info in server_data.items():
                env_type_display = "Environment File" if env_type == "env_file" else "Mounted Environment"
                print(f"    {env_type_display} ({env_info['path']}):")
                
                if env_info['variables']:
                    for key, value in sorted(env_info['variables'].items()):
                        # Mask sensitive values
                        display_value = value
                        if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):
                            display_value = '*' * len(value) if value else ''
                        print(f"      {key:<26} {display_value}")
                else:
                    print("      (No variables found)")
    
    # Configuration sections
    sections = [
        {
            'title': 'üåê Server Configuration',
            'items': [
                ('LightRAG URL', settings.LIGHTRAG_URL),
                ('LightRAG Memory URL', settings.LIGHTRAG_MEMORY_URL),
                ('Weaviate URL', settings.WEAVIATE_URL),
                ('Ollama URL', settings.OLLAMA_URL),
                ('Remote Ollama URL', settings.REMOTE_OLLAMA_URL),
            ]
        },
        {
            'title': '‚öôÔ∏è  Feature Flags',
            'items': [
                ('Use Weaviate', "‚úì" if settings.USE_WEAVIATE else "‚úó"),
                ('Use MCP', "‚úì" if settings.USE_MCP else "‚úó"),
                ('Show Splash Screen', "‚úì" if settings.SHOW_SPLASH_SCREEN else "‚úó"),
            ]
        },
        {
            'title': 'üìÇ Directory Configuration',
            'items': [
                ('Root Directory', settings.ROOT_DIR),
                ('Home Directory', settings.HOME_DIR),
                ('Data Directory', settings.DATA_DIR),
                ('Repository Directory', settings.REPO_DIR),
                ('Agno Storage Directory', settings.AGNO_STORAGE_DIR),
                ('Agno Knowledge Directory', settings.AGNO_KNOWLEDGE_DIR),
            ]
        },
        {
            'title': 'ü§ñ AI & Storage Configuration',
            'items': [
                ('Storage Backend', settings.STORAGE_BACKEND),
                ('LLM Model', settings.LLM_MODEL),
                ('User ID', settings.USER_ID),
                ('Log Level', settings.LOG_LEVEL_STR),
            ]
        }
    ]
    
    for section in sections:
        print(f"\n{section['title']}:")
        print(f"  Setting{' '*22}Value")
        for name, value in section['items']:
            print(f"  {name:<30} {value}")

    # Docker Compose Summary
    docker_summary = get_docker_compose_summary()
    print("\n" + "=" * 60)
    print("  Docker Compose Summary")
    print("=" * 60)
    for name, config in docker_summary.items():
        print(f"\nüê≥ {name}:")
        if "error" in config:
            print(f"  Error: {config['error']}")
            continue
        
        if config.get('image'):
            print(f"  Image: {config['image']}")
        if config.get('ports'):
            print(f"  Ports: {', '.join(config['ports'])}")
        if config.get('volumes'):
            print("  Volumes:")
            for v in config['volumes']:
                print(f"    - {v}")
        if config.get('environment'):
            print("  Environment:")
            for e in config['environment']:
                print(f"    - {e}")

    # Footer
    print("\n" + "=" * 60)
    print("Configuration loaded successfully!")
    print("=" * 60)


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Display Personal Agent configuration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "-v", "--version",
        action="version",
        version="Personal Agent Config Tool v1.0"
    )
    
    parser.add_argument(
        "--no-color",
        action="store_true",
        help="Disable colored output"
    )
    
    parser.add_argument(
        "--json",
        action="store_true",
        help="Output configuration as JSON"
    )
    
    args = parser.parse_args()
    
    try:
        if args.json:
            output_json()
        elif args.no_color:
            print_config_no_color()
        else:
            # Default to colored fancy output
            print_config_colored()
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
