[tool.poetry]
name = "personal-agent"
version = "v0.11.38dev"
description = "Personal AI agent with MCP and Memory, powered by Agno, LightRAG and Ollama"
authors = ["Eric Suchanek <suchanek@mac.com>"]
readme = "README.md"
homepage = "https://github.com/suchanek/personal_agent"
repository = "https://github.com/suchanek/personal_agent"
keywords = ["personal-agent", "mcp", "memory", "ollama", "langchain"]
license = "GPL-3.0-only"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
langchain = "^0.3.0"
langchain-ollama = "^0.3.3"
langchain-community = "^0.3.0"
weaviate-client = "^4.8.1"
flask = "^3.0.3"
hypercorn = "^0.17.3"
requests = "^2.32.3"
langchain-weaviate = "^0.0.4"
rich = "^14.0.0"
python-dotenv = "^1.1.0"
smolagents = "^1.17.0"
litellm = "^1.71.3"
markdownify = "^1.1.0"
pathlib = "^1.0.1"
duckduckgo-search = "^8.0.2"
duckdb = "^1.3.0"
yfinance = "^0.2.61"
agno = "^1.5.8"
mcp = "^1.9.2"
pgvector = "^0.4.1"
ollama = "^0.5.1"
openai = "^1.86.0"
lxml-html-clean = "^0.4.2"
arxiv = "^2.2.0"
newspaper4k = "^0.9.3.1"
pypdf = "^5.6.1"
lancedb = "^0.24.0"
streamlit = "^1.46.0"
tantivy = "^0.24.0"
networkx = "^3.5"
graspologic = "^3.4.1"
pylance = "^0.30.0"
watchdog = "^6.0.0"
fastapi = "^0.115.14"
jwt = "^1.4.0"
aiofiles = "^24.1.0"
nest-asyncio = "^1.6.0"
googlesearch-python = "^1.3.0"
pycountry = "^24.6.1"
lightrag-hku = "^1.3.9"
pyyaml = "^6.0.2"
spacy = "^3.0.0"
pytest = "^8.4.1"
docker = "^7.1.0"
plotly = "^6.2.0"
python-dateutil = "^2.9.0.post0"
pygithub = "^2.6.1"
google-genai = "^1.26.0"
groq = "^0.30.0"
prompt-toolkit = "^3.0.51"
anthropic = "^0.59.0"
e2b-code-interpreter = "^1.5.2"
openai-harmony = "^0.0.3"
psutil = "^7.0.0"

[tool.poetry.scripts]
personal-agent-langchain = "src.personal_agent.main:main"
pagl_cli = "src.personal_agent.main:cli_main"
personal-agent-langchain-cli = "src.personal_agent.main:cli_main"
paglc = "src.personal_agent.main:cli_main"

personal-agent-smolagent = "src.personal_agent.smol_main:run_smolagents_web"
pags = "src.personal_agent.smol_main:run_smolagents_web"
personal-agent-smolagent-cli = "src.personal_agent.smol_main:cli_main"
pags_cli = "src.personal_agent.smol_main:cli_main"

personal-agent = "src.personal_agent.web.agno_interface:main"
paga = "src.personal_agent.web.agno_interface:main"
personal-agent-agno-cli = "src.personal_agent.agno_main:cli_main"
paga_cli = "src.personal_agent.agno_main:cli_main"

paga_team_cli = "src.personal_agent.team.reasoning_team:cli_main"
rteam = "src.personal_agent.team.reasoning_team:cli_main"

install-mcp-servers = "scripts.install_mcp:main"
test-mcp-servers = "tests.test_mcp_availability:main"
test-tools = "tests.test_tools:main"
store-fact = "scripts.store_fact:main"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.36.0"

# Poe the Poet task configuration
[tool.poe.tasks]

# === Core Application Tasks ===
[tool.poe.tasks.serve]
help = "Start the simple personal agent interface"
cmd = "streamlit run src/personal_agent/web/agno_interface.py"
args = [
  { name = "port", options = ["--server.port"], default = "8501", help = "Port to serve on" },
  { name = "host", options = ["--server.address"], default = "localhost", help = "Host to bind to" }
]

# === CLI Interface Tasks ===
[tool.poe.tasks.cli]
help = "Run CLI interface"
cmd = "poetry run paga_cli"


[tool.poe.tasks.team]
help = "Run reasoning team CLI"
cmd = "poetry run rteam"

# === MCP Server Management ===
[tool.poe.tasks.mcp-install]
help = "Install MCP servers"
cmd = "python scripts/install_mcp.py"

[tool.poe.tasks.mcp-test]
help = "Test MCP server availability"
cmd = "python tests/test_mcp_availability.py"

[tool.poe.tasks.mcp-setup]
help = "Install and test MCP servers"
sequence = ["mcp-install", "mcp-test"]

# === Testing Tasks ===
[tool.poe.tasks.test]
help = "Run all tests"
cmd = "pytest"
args = [
  { name = "path", positional = true, default = "tests/", help = "Test path or file" },
  { name = "verbose", options = ["-v", "--verbose"], type = "boolean", help = "Verbose output" },
  { name = "coverage", options = ["-c", "--coverage"], type = "boolean", help = "Run with coverage" }
]

[tool.poe.tasks.test-tools]
help = "Test available tools"
cmd = "test-tools"

[tool.poe.tasks.test-unit]
help = "Run unit tests"
cmd = "pytest tests/unit -v"

[tool.poe.tasks.test-integration]
help = "Run integration tests"
cmd = "pytest tests/integration -v"

[tool.poe.tasks.test-memory]
help = "Run memory system tests"
cmd = "pytest memory_tests/ -v"

[tool.poe.tasks.test-all]
help = "Run comprehensive test suite"
sequence = ["test-unit", "test-integration", "test-memory", "test-tools", "mcp-test"]

# === Memory and Knowledge Management ===
[tool.poe.tasks.store-fact]
help = "Store a fact in the knowledge base"
cmd = "store-fact"
args = [
  { name = "fact", positional = true, help = "Fact to store" },
  { name = "category", options = ["-c", "--category"], help = "Fact category" }
]

[tool.poe.tasks.memory-clean]
help = "Clean memory system"
script = "src.personal_agent.tools.memory_cleaner:main"

[tool.poe.tasks.restart-lightrag]
help = "Smart restart LightRAG server"
shell = "./smart-restart-lightrag.sh"

# === Analysis and Debugging ===
[tool.poe.tasks.analyze]
help = "Run comprehensive analysis"
cmd = "python analysis/test_comprehensive_research.py"


# === Streamlit Dashboard ===
[tool.poe.tasks.dashboard]
help = "Start Streamlit dashboard"
cmd = "streamlit run src/personal_agent/streamlit/dashboard.py"
args = [
  { name = "port", options = ["--server.port"], default = "8501", help = "Streamlit port" }
]

# === Utility Tasks ===
[tool.poe.tasks.config]
help = "Display Personal Agent configuration"
cmd = "python -m src.personal_agent.tools.show_config"
args = [
  { name = "no-color", options = ["--no-color"], type = "boolean", help = "Disable colored output" },
  { name = "json", options = ["--json"], type = "boolean", help = "Output configuration as JSON" }
]

[tool.poe.tasks.clean]
help = "Clean up temporary files and caches"
sequence = [
  { cmd = "find . -type d -name '__pycache__' -exec rm -rf {} + || true" },
  { cmd = "find . -name '*.pyc' -delete || true" },
  { cmd = "find . -name '.pytest_cache' -exec rm -rf {} + || true" }
]

# === Environment Management ===
[tool.poe.tasks.switch-user]
help = "Switch user configuration"
cmd = "python switch-user.py ${user}"
args = [
  { name = "user", positional = true, help = "User to switch to" }
]

[tool.poe.tasks.switch-ollama]
help = "Switch Ollama configuration"
shell = "./switch-ollama.sh"

# === Examples and Demos ===
[tool.poe.tasks.demo-memory]
help = "Run memory system demo"
cmd = "python examples/15_memory_demo.py"

[tool.poe.tasks.demo-team]
help = "Run team demo"
cmd = "python examples/personal_agent_team_demo.py"

[tool.poe.tasks.example-mcp]
help = "Run MCP tools example"
cmd = "python examples/mcp_tools_examples.py"

# === Quick Start Tasks ===
[tool.poe.tasks.quick-start]
help = "Quick start for new users"
sequence = ["mcp-setup", "demo-memory", "serve"]

[tool.poe.tasks.full-demo]
help = "Full system demonstration"
sequence = ["mcp-setup", "demo-memory", "demo-team", "example-mcp"]

# === Documentation ===
[tool.poe.tasks.docs]
help = "Generate project documentation using pdoc"
shell = "cd src && pdoc -o ../docs personal_agent"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
