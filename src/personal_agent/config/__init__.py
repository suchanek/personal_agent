"""Configuration package for Personal Agent."""

from .mcp_servers import MCP_SERVERS, get_mcp_servers
from .settings import (
    AGNO_KNOWLEDGE_DIR,
    AGNO_STORAGE_DIR,
    BASE_DIR,
    DATA_DIR,
    EMBEDDING_TIMEOUT,
    HOME_DIR,
    HTTPX_CONNECT_TIMEOUT,
    HTTPX_POOL_TIMEOUT,
    HTTPX_READ_TIMEOUT,
    HTTPX_TIMEOUT,
    HTTPX_WRITE_TIMEOUT,
    LIGHTRAG_INPUTS_DIR,
    LIGHTRAG_MEMORY_DIR,
    LIGHTRAG_MEMORY_INPUTS_DIR,
    LIGHTRAG_MEMORY_PORT,
    LIGHTRAG_MEMORY_STORAGE_DIR,
    LIGHTRAG_MEMORY_URL,
    LIGHTRAG_PORT,
    LIGHTRAG_SERVER,
    LIGHTRAG_SERVER_DIR,
    LIGHTRAG_STORAGE_DIR,
    LIGHTRAG_URL,
    LLM_MODEL,
    LLM_TIMEOUT,
    LMSTUDIO_URL,
    LOG_LEVEL,
    LOG_LEVEL_STR,
    OLLAMA_KEEP_ALIVE,
    OLLAMA_NUM_PREDICT,
    OLLAMA_TEMPERATURE,
    OLLAMA_TIMEOUT,
    OLLAMA_URL,
    PDF_CHUNK_SIZE,
    PERSAG_HOME,
    PERSAG_ROOT,
    PORT,
    PROVIDER,
    REMOTE_LMSTUDIO_URL,
    REMOTE_OLLAMA_URL,
    REPO_DIR,
    ROOT_DIR,
    SHOW_SPLASH_SCREEN,
    STORAGE_BACKEND,
    USE_MCP,
    USE_WEAVIATE,
    USER_DATA_DIR,
    WEAVIATE_URL,
    get_env_bool,
    get_env_var,
    get_package_version,
    get_provider_default_model,
    get_qwen_instruct_settings,
    get_qwen_thinking_settings,
)
from .user_id_mgr import (
    get_current_user_id,
    get_user_storage_paths,
    get_userid,
    load_user_from_file,
    refresh_user_dependent_settings,
)


# Create a simple get_settings function for compatibility
def get_settings():
    """Get configuration settings as a dictionary."""
    return {
        "USER_ID": get_userid(),
        "ROOT_DIR": ROOT_DIR,
        "HOME_DIR": HOME_DIR,
        "DATA_DIR": DATA_DIR,
        "REPO_DIR": REPO_DIR,
        "WEAVIATE_URL": WEAVIATE_URL,
        "OLLAMA_URL": OLLAMA_URL,
        "REMOTE_OLLAMA_URL": REMOTE_OLLAMA_URL,
        "LLM_MODEL": LLM_MODEL,
        "USE_WEAVIATE": USE_WEAVIATE,
        "USE_MCP": USE_MCP,
        "LOG_LEVEL": LOG_LEVEL,
        "MCP_SERVERS": MCP_SERVERS,
        "get_env_var": get_env_var,
        "get_settings": get_settings,
        "get_mcp_servers": get_mcp_servers,
        "AGNO_STORAGE_DIR": AGNO_STORAGE_DIR,
        "AGNO_KNOWLEDGE_DIR": AGNO_KNOWLEDGE_DIR,
        "STORAGE_BACKEND": STORAGE_BACKEND,
        "LIGHTRAG_SERVER": LIGHTRAG_SERVER,
        "LIGHTRAG_URL": LIGHTRAG_URL,
        "LIGHTRAG_MEMORY_URL": LIGHTRAG_MEMORY_URL,
    }


__all__ = [
    # Core configuration constants
    "AGNO_KNOWLEDGE_DIR",
    "AGNO_STORAGE_DIR",
    "BASE_DIR",
    "DATA_DIR",
    "USER_DATA_DIR",
    "HOME_DIR",
    "PERSAG_HOME",
    "PERSAG_ROOT",
    "REPO_DIR",
    "ROOT_DIR",
    "STORAGE_BACKEND",
    # LightRAG configuration
    "LIGHTRAG_INPUTS_DIR",
    "LIGHTRAG_MEMORY_DIR",
    "LIGHTRAG_MEMORY_INPUTS_DIR",
    "LIGHTRAG_MEMORY_PORT",
    "LIGHTRAG_MEMORY_STORAGE_DIR",
    "LIGHTRAG_MEMORY_URL",
    "LIGHTRAG_PORT",
    "LIGHTRAG_SERVER",
    "LIGHTRAG_SERVER_DIR",
    "LIGHTRAG_STORAGE_DIR",
    "LIGHTRAG_URL",
    # LLM and service URLs
    "LLM_MODEL",
    "LMSTUDIO_URL",
    "OLLAMA_URL",
    "REMOTE_LMSTUDIO_URL",
    "REMOTE_OLLAMA_URL",
    "WEAVIATE_URL",
    # Timeout and performance settings
    "EMBEDDING_TIMEOUT",
    "HTTPX_CONNECT_TIMEOUT",
    "HTTPX_POOL_TIMEOUT",
    "HTTPX_READ_TIMEOUT",
    "HTTPX_TIMEOUT",
    "HTTPX_WRITE_TIMEOUT",
    "LLM_TIMEOUT",
    "OLLAMA_KEEP_ALIVE",
    "OLLAMA_NUM_PREDICT",
    "OLLAMA_TEMPERATURE",
    "OLLAMA_TIMEOUT",
    "PDF_CHUNK_SIZE",
    # Logging and display
    "LOG_LEVEL",
    "LOG_LEVEL_STR",
    "PORT",
    "PROVIDER",
    "SHOW_SPLASH_SCREEN",
    # Feature flags
    "USE_MCP",
    "USE_WEAVIATE",
    # MCP servers
    "MCP_SERVERS",
    # Utility functions
    "get_current_user_id",
    "get_env_bool",
    "get_env_var",
    "get_mcp_servers",
    "get_package_version",
    "get_provider_default_model",
    "get_qwen_instruct_settings",
    "get_qwen_thinking_settings",
    "get_settings",
    "get_user_storage_paths",
    "get_userid",
    "load_user_from_file",
    "refresh_user_dependent_settings",
]
