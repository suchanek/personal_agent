#!/usr/bin/env python3
"""
Personal Agent Configuration Display Tool

This script provides a pretty-printed view of the personal agent's configuration
including environment variables, server settings, feature flags, and directory paths.

Usage:
    ./tools/show-config [options]

Options:
    -h, --help     Show this help message
    -v, --version  Show version information
    --no-color     Disable colored output
    --json         Output configuration as JSON
"""

import sys
import json
import argparse
from pathlib import Path

# Add the src directory to Python path so we can import our modules
script_dir = Path(__file__).resolve().parent
project_root = script_dir.parent
src_dir = project_root / "src"
sys.path.insert(0, str(src_dir))

try:
    from personal_agent.config import settings
except ImportError as e:
    print(f"Error: Could not import settings module: {e}")
    print("Make sure you're running this script from the project root directory.")
    sys.exit(1)


def output_json():
    """Output configuration as JSON."""
    config_data = {
        "version": settings.get_package_version(),
        "environment_file": {
            "loaded": settings.dotenv_loaded,
            "path": str(settings.dotenv_path)
        },
        "environment_variables": dict(settings._env_vars) if settings._env_vars else {},
        "server_configuration": {
            "lightrag_url": settings.LIGHTRAG_URL,
            "lightrag_memory_url": settings.LIGHTRAG_MEMORY_URL,
            "weaviate_url": settings.WEAVIATE_URL,
            "ollama_url": settings.OLLAMA_URL,
            "remote_ollama_url": settings.REMOTE_OLLAMA_URL,
        },
        "feature_flags": {
            "use_weaviate": settings.USE_WEAVIATE,
            "use_mcp": settings.USE_MCP,
            "show_splash_screen": settings.SHOW_SPLASH_SCREEN,
        },
        "directories": {
            "root_dir": settings.ROOT_DIR,
            "home_dir": settings.HOME_DIR,
            "data_dir": settings.DATA_DIR,
            "repo_dir": settings.REPO_DIR,
            "agno_storage_dir": settings.AGNO_STORAGE_DIR,
            "agno_knowledge_dir": settings.AGNO_KNOWLEDGE_DIR,
        },
        "ai_storage": {
            "storage_backend": settings.STORAGE_BACKEND,
            "llm_model": settings.LLM_MODEL,
            "user_id": settings.USER_ID,
            "log_level": settings.LOG_LEVEL_STR,
        }
    }
    
    print(json.dumps(config_data, indent=2))


def print_config_no_color():
    """Print configuration without ANSI colors."""
    version = settings.get_package_version()
    print("=" * 60)
    print("  Personal Agent Configuration Status")
    print(f"  Version: {version}")
    print("=" * 60)
    
    # Environment file status
    print("\nüìÅ Environment File Status:")
    if settings.dotenv_loaded:
        print(f"  ‚úì Successfully loaded .env from: {settings.dotenv_path}")
    else:
        print("  ‚úó Failed to load .env file")
    
    # Environment variables section
    if settings._env_vars:
        print("\nüîß Environment Variables:")
        print(f"  Variable{' '*20}Value")
        for key, value in sorted(settings._env_vars.items()):
            # Mask sensitive values
            display_value = value
            if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key', 'token']):
                display_value = '*' * len(value) if value else ''
            print(f"  {key:<28} {display_value}")
    
    # Configuration sections
    sections = [
        {
            'title': 'üåê Server Configuration',
            'items': [
                ('LightRAG URL', settings.LIGHTRAG_URL),
                ('LightRAG Memory URL', settings.LIGHTRAG_MEMORY_URL),
                ('Weaviate URL', settings.WEAVIATE_URL),
                ('Ollama URL', settings.OLLAMA_URL),
                ('Remote Ollama URL', settings.REMOTE_OLLAMA_URL),
            ]
        },
        {
            'title': '‚öôÔ∏è  Feature Flags',
            'items': [
                ('Use Weaviate', "‚úì" if settings.USE_WEAVIATE else "‚úó"),
                ('Use MCP', "‚úì" if settings.USE_MCP else "‚úó"),
                ('Show Splash Screen', "‚úì" if settings.SHOW_SPLASH_SCREEN else "‚úó"),
            ]
        },
        {
            'title': 'üìÇ Directory Configuration',
            'items': [
                ('Root Directory', settings.ROOT_DIR),
                ('Home Directory', settings.HOME_DIR),
                ('Data Directory', settings.DATA_DIR),
                ('Repository Directory', settings.REPO_DIR),
                ('Agno Storage Directory', settings.AGNO_STORAGE_DIR),
                ('Agno Knowledge Directory', settings.AGNO_KNOWLEDGE_DIR),
            ]
        },
        {
            'title': 'ü§ñ AI & Storage Configuration',
            'items': [
                ('Storage Backend', settings.STORAGE_BACKEND),
                ('LLM Model', settings.LLM_MODEL),
                ('User ID', settings.USER_ID),
                ('Log Level', settings.LOG_LEVEL_STR),
            ]
        }
    ]
    
    for section in sections:
        print(f"\n{section['title']}:")
        print(f"  Setting{' '*22}Value")
        for name, value in section['items']:
            print(f"  {name:<30} {value}")
    
    # Footer
    print("\n" + "=" * 60)
    print("Configuration loaded successfully!")
    print("=" * 60)


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Display Personal Agent configuration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "-v", "--version",
        action="version",
        version="Personal Agent Config Tool v1.0"
    )
    
    parser.add_argument(
        "--no-color",
        action="store_true",
        help="Disable colored output"
    )
    
    parser.add_argument(
        "--json",
        action="store_true",
        help="Output configuration as JSON"
    )
    
    args = parser.parse_args()
    
    try:
        if args.json:
            output_json()
        elif args.no_color:
            print_config_no_color()
        else:
            settings.print_config()
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
