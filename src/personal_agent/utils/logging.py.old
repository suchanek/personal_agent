# -*- coding: utf-8 -*-
"""Logging setup for the Personal Agent project.
This module configures logging with Rich handler and suppresses noisy loggers.
"""
import logging
import warnings

from rich.logging import RichHandler

from personal_agent.config.settings import LOG_LEVEL


def setup_logging(name=__name__, level=LOG_LEVEL) -> logging.Logger:
    """Set up logging configuration with Rich handler."""
    # Suppress warnings
    warnings.filterwarnings("ignore", category=DeprecationWarning, module="ollama")
    warnings.filterwarnings(
        "ignore", message=".*model_fields.*", category=DeprecationWarning
    )
    warnings.filterwarnings("ignore", category=ResourceWarning, message=".*unclosed.*")
    warnings.filterwarnings(
        "ignore", category=ResourceWarning, message=".*subprocess.*"
    )

    # Setup logging with DEBUG level and RichHandler
    logging.basicConfig(level=level, handlers=[RichHandler()])
    log = logging.getLogger(name)
    log.setLevel(LOG_LEVEL)

    # Reduce httpx logging verbosity to WARNING to reduce noise
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    logging.getLogger("httpcore.connection").setLevel(logging.WARNING)
    logging.getLogger("httpcore.http11").setLevel(logging.WARNING)

    # Reduce Flask/Werkzeug logging verbosity to WARNING to reduce noise
    logging.getLogger("werkzeug").setLevel(logging.WARNING)
    logging.getLogger("flask").setLevel(logging.WARNING)
    logging.getLogger("flask.app").setLevel(logging.WARNING)
    logging.getLogger("werkzeug._internal").setLevel(logging.WARNING)

    # Also suppress other common noisy loggers
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("requests").setLevel(logging.WARNING)

    return log
