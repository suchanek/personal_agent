# Personal AI Agent Environment Variables
# Copy this file to .env and fill in your actual API keys

# GitHub Personal Access Token
# Get from: https://github.com/settings/tokens
GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here

# Brave Search API Key  
# Get from: https://api.search.brave.com/app/keys
BRAVE_API_KEY=your_brave_api_key_here

# MULTIMODAL AGENTS: API Keys for Media Generation
# ModelsLab API Key
# Get from: https://modelslab.com/
MODELS_LAB_API_KEY="your_modelslab_api_key_here"

# ElevenLabs API Key  
# Get from: https://elevenlabs.io/
ELEVEN_LABS_API_KEY="your_elevenlabs_api_key_here"

# Giphy API Key
# Get from: https://developers.giphy.com/
GIPHY_API_KEY="your_giphy_api_key_here"

LOG_LEVEL=WARNING
# USER CONFIGURATION
USER_ID="YourUsername"

# Directories for the Personal AI Agent
ROOT_DIR=/                     # Full filesystem access
HOME_DIR=/Users/yourusername           # User's home directory  
DATA_DIR=/Users/Shared/personal_agent_data     # Data directory for vector database
REPO_DIR=/Users/yourusername/repos     # Repository directory

# Core Agent Configuration
WEAVIATE_URL=http://localhost:8080
REMOTE_OLLAMA_URL=http://tesla.local:11434

#OLLAMA_URL=http://tesla.local:11434
OLLAMA_URL=http://localhost:11434

OLLAMA_DOCKER_URL=http://host.docker.internal:11434

USE_WEAVIATE=False
USE_MCP=True

# LLM Model configuration - use actual model names, not dictionary references
#LLM_MODEL=llama3.1:8b-instruct-q8_0
LLM_MODEL=qwen3:1.7b
EMBEDDING_MODEL=nomic-embed-text

# Agno Storage Configuration
# Storage backend: "weaviate" or "agno"
STORAGE_BACKEND=agno
AGNO_STORAGE_DIR=${DATA_DIR}/${STORAGE_BACKEND}/${USER_ID}

# Knowledge directory for Agno
AGNO_KNOWLEDGE_DIR=${AGNO_STORAGE_DIR}/knowledge

# MODEL CONTEXT SIZE OVERRIDES
# Override context sizes for specific models (optional)
# Format: MODEL_NAME_CTX_SIZE (replace : with _ and . with _)
# Examples:
# QWEN3_1_7B_CTX_SIZE=16384
# LLAMA3_1_8B_INSTRUCT_Q8_0_CTX_SIZE=65536
# DEFAULT_MODEL_CTX_SIZE=8192

# RATE LIMITING CONFIGURATION
# DuckDuckGo Search Rate Limiting
DUCKDUCKGO_SEARCH_DELAY=3.0      # Seconds between search requests
DUCKDUCKGO_MAX_RETRIES=3         # Maximum retries on rate limit
DUCKDUCKGO_RETRY_DELAY=10.0      # Base retry delay (exponential backoff)

# Default API Rate Limiting (for other tools)
DEFAULT_API_DELAY=1.0            # Default delay between API calls
DEFAULT_MAX_RETRIES=3            # Default maximum retries
DEFAULT_RETRY_DELAY=5.0          # Default retry delay

# Embedding model (also via Ollama)

EMBEDDING_MODEL=nomic-embed-text
EMBEDDING_BINDING=ollama
EMBEDDING_BINDING_HOST=http://host.docker.internal:11434
EMBEDDING_DIM=768
# EMBEDDING_BINDING_API_KEY=your_api_key
# Optional LightRAG REST server configuration
# GUI Endpoint
LIGHTRAG_URL=http://localhost:9621
LIGHTRAG_SERVER_URL=http://localhost:9621/webui

# The actual model we are using by default
LLM_MODEL=qwen3:8b

# LLM_BINDING_API_KEY=your_api_key

# LIGHTRAG TIMEOUT SETTINGS FOR PDF PROCESSING
LLM_TIMEOUT=7200          # 120 minutes for LLM processing (increased for remote Ollama)
EMBEDDING_TIMEOUT=3600    # 60 minutes for embedding processing (increased for remote)
PDF_CHUNK_SIZE=2048        # Process PDFs in 800 byte chunks for maximum reliability
HTTP_TIMEOUT=7200         # 120 minutes for HTTP client timeout
CONNECTION_TIMEOUT=600    # 10 minutes for initial connection timeout
READ_TIMEOUT=7200         # 120 minutes for read operations
WRITE_TIMEOUT=600         # 10 minutes for write operations
POOL_TIMEOUT=600          # 10 minutes for connection pool timeout

# HTTPX CLIENT TIMEOUT SETTINGS (for Ollama client)
HTTPX_TIMEOUT=7200        # 120 minutes for httpx client operations
HTTPX_CONNECT_TIMEOUT=600 # 10 minutes for httpx connection timeout
HTTPX_READ_TIMEOUT=7200   # 120 minutes for httpx read timeout
HTTPX_WRITE_TIMEOUT=600   # 10 minutes for httpx write timeout
HTTPX_POOL_TIMEOUT=600    # 10 minutes for httpx pool timeout


# LightRAG Memory Service URL
LIGHTRAG_MEMORY_URL=http://localhost:9622
